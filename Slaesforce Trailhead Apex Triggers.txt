- Triggers

- Advantages

--> Apex triggers enable you to perform custom actions before or after events to records in Salesforce, such as insertions, updates, or deletions. 

- Uses

--> Apex triggers enable you to perform custom actions before or after events to records in Salesforce, such as insertions, updates, or deletions. 
--> You can use triggers to do anything you can do in Apex, including executing SOQL and DML or calling custom Apex methods.
--> Use triggers to perform tasks that can’t be done by using the point-and-click tools in the Salesforce user interface. For example, 
    if validating a field value or updating a field on a record, use validation rules and flows instead.

-> Triggers are active by default when created. 

- Trigger Syntax

-->  A trigger definition starts with the trigger keyword. It is then followed by the name of the trigger, the Salesforce object that the trigger is associated with, and the conditions under which it fires
eg) 
trigger TriggerName on ObjectName (trigger_events) {
   code_block
}

--> trigger events in a comma-separated list.

before insert
before update
before delete
after insert
after update
after delete
after undelete

- Types Of Triggers

--> There are two types of triggers.
--> Before triggers are used to update or validate record values before they’re saved to the database.
--> After triggers are used to access field values that are set by the system (such as a record's Id or LastModifiedDate field), and to affect changes in other records. 
    The records that fire the after trigger are read-only.  

--> To access the records that caused the trigger to fire, use context variables. For example, Trigger.new contains all the records that were inserted in insert or update triggers. 

--> It iterates over each account in a for loop and updates the Description field for each.
eg) trigger HelloWorldTrigger on Account (before insert) {
    for(Account a : Trigger.new) {
        a.Description = 'New description';
    }   
}

--> The following table is a comprehensive list of all context variables available for triggers.

Variable	Usage
isExecuting	 Returns true if the current context for the Apex code is a trigger, not a Visualforce page, a Web service, or an executeanonymous() API call.
isInsert	 Returns true if this trigger was fired due to an insert operation, from the Salesforce user interface, Apex, or the API.
isUpdate	 Returns true if this trigger was fired due to an update operation, from the Salesforce user interface, Apex, or the API.
isDelete	 Returns true if this trigger was fired due to a delete operation, from the Salesforce user interface, Apex, or the API.
isBefore	 Returns true if this trigger was fired before any record was saved.
isAfter	 Returns true if this trigger was fired after all records were saved.
isUndelete	 Returns true if this trigger was fired after a record is recovered from the Recycle Bin. This recovery can occur after an undelete operation from the Salesforce user interface, Apex, or the API.

new[Current Detail]  Returns a list of the new versions of the sObject records.
                     This sObject list is only available in insert, update, and undelete triggers, and the records can only be modified in before triggers.

newMap[Available IDs] A map of IDs to the new versions of the sObject records.
                      This map is only available in before update, after insert, after update, and after undelete triggers.

old	      Returns a list of the old versions of the sObject records.
            This sObject list is only available in update and delete triggers.

oldMap	A map of IDs to the old versions of the sObject records.
            This map is only available in update and delete triggers.

operationType	Returns an enum of type System.TriggerOperation corresponding to the current operation.
                  Possible values of the System.TriggerOperation enum are: BEFORE_INSERT, BEFORE_UPDATE, BEFORE_DELETE, AFTER_INSERT, AFTER_UPDATE, AFTER_DELETE, and AFTER_UNDELETE.
                  If you vary your programming logic based on different trigger types, consider using the switch statement with different permutations of unique trigger execution enum states.

size	      The total number of records in a trigger invocation, both old and new.

eg)
switch on Trigger.operationType { // Here Trigger.operationType is an Enum.
   when BEFORE_INSERT { }        // Enum values here is BEFORE_INSERT
   when BEFORE_UPDATE { }
   when BEFORE_DELETE { }
   when AFTER_INSERT { }
   when AFTER_UPDATE { }
   when AFTER_DELETE { }
   when AFTER_UNDELETE { }
 }

- Using Trigger Exceptions

--> To prevent saving records in a trigger, call the addError() method on the sObject in question. 
    The addError() method throws a fatal error inside a trigger. The error message is displayed in the user interface and is logged.

-> The following trigger prevents the deletion of an account if it has related opportunities.
eg)
trigger AccountDeletion on Account (before delete) {
    // Prevent the deletion of accounts if they have related opportunities.
    for (Account a : [SELECT Id FROM Account
                     WHERE Id IN (SELECT AccountId FROM Opportunity) AND
                     Id IN :Trigger.old]) {
        Trigger.oldMap.get(a.Id).addError(
            'Cannot delete account with related opportunities.');
    }
}

--> Calling addError()in a trigger causes the entire set of operations to roll back, except when bulk DML is called with partial success.
--> If a bulk DML call in the Lightning Platform API spawned the trigger, the runtime engine sets the bad records aside. The runtime engine then attempts 
    a partial save of the records that did not generate errors. [DML Calls / Database Methods].
--> If a DML statement in Apex spawned the trigger, any error rolls back the entire operation. However, the runtime engine still processes 
    every record in the operation to compile a comprehensive list of errors. [DML Statements].


- Triggers and Callouts

--> Apex calls to external Web services are referred to as callouts.
--> When making a callout from a trigger, the callout must be done asynchronously so that the trigger process
    doesn’t block you from working while waiting for the external service's response.
--> To make a callout from a trigger, call a class method that executes asynchronously. Such a method is called a future method and is 
    annotated with @future(callout=true). This example class contains the future method that makes the callout.

-> Class with Asynchronous Method
public class CalloutClass {
    @future(callout=true)
    public static void makeCallout() {
        HttpRequest request = new HttpRequest();
        // Set the endpoint URL.
        String endpoint = 'http://yourHost/yourService';
        request.setEndPoint(endpoint);
        // Set the HTTP verb to GET.
        request.setMethod('GET');
        // Send the HTTP request and get the response.
        HttpResponse response = new HTTP().send(request);
    }
}


--> Trigger
trigger CalloutTrigger on Account (before insert, before update) {
    CalloutClass.makeCallout();
}

- Trigger For Single Record

trigger MyTriggerNotBulk on Account(before insert) {
    Account a = Trigger.new[0];
    a.Description = 'New description';
}

- Trigger For Multiple Record

trigger MyTriggerBulk on Account(before insert) {
    for(Account a : Trigger.new) {
        a.Description = 'New description';
    }
}

-->  Making fewer database queries helps you avoid hitting query limits, which are 100 SOQL queries for synchronous Apex or 200 for asynchronous Apex.
--> The SOQL query does the heavy lifting and is called once outside the main loop.

- Performing Bulk SOQL

eg)
trigger SoqlTriggerBulk on Account(after update) {  
    // Perform SOQL query once.    
    // Get the related opportunities for the accounts in this trigger.
    List<Opportunity> relatedOpps = [SELECT Id,Name,CloseDate FROM Opportunity
        WHERE AccountId IN :Trigger.new];
    // Iterate over the related opportunities    
    for(Opportunity opp : relatedOpps) { 
        // Do some other processing
    }
}

-> You can reduce the previous example in size by combining the SOQL query with the for loop in one statement: the SOQL for loop. Here is another version of this bulk trigger using a SOQL for loop.
eg) 
trigger SoqlTriggerBulk on Account(after update) {  
    // Perform SOQL query once.    
    // Get the related opportunities for the accounts in this trigger,
    // and iterate over those records.
    for(Opportunity opp : [SELECT Id,Name,CloseDate FROM Opportunity
        WHERE AccountId IN :Trigger.new]) {
        // Do some other processing
    }
}


- Performing Bulk DML

--> The Apex runtime allows up to 150 DML calls in one transaction.
